Dear Team,
As per my discussion with Mani,
I have to relocate to Tallinn, Estonia, as my spouse is relocating to Estonia for his employment. I wish to continue working at Bank of America, unfortunately, I have to resign owing to the following constraints. I can serve my notice¬†period till September 8, 2025.

1) Immigration Process Dependency
¬† ¬† The visa and immigration process is entirely handled by my spouse's employer, and I must travel together with him as part of the coordinated entry plan. I cannot relocate independently
2)Time constraint¬†for residence permit¬†¬† ¬†My spouse‚Äôs employer has initiated a D Visa for me, which starts on September 3, 2025, and is valid only for 6 months. Once I arrive in Estonia, my spouse's employer will apply for my Temporary Residence Permit (TRP), which takes approximately 3.5 months to process.¬† ¬†If I travel after completing 60-day notice period, there is a significant risk that the TRP will not be approved in time, and I would be required to leave the country (Estonia) after the visa expiry.
3) Remote work unavailability¬† ¬†I wish to work remotely for Bank¬†of America, but the bank policy doesn't allow remote work out of the GBS location.
While I understand that the company policy requires a 60-day notice, I respectfully request an adjustment of the remaining notice period using my earned leave/holidays, and have my last working day as September 8, 2025.¬†I am willing to offer full support and cooperation until September 8 to ensure a smooth transition.¬†Please let me know if we can discuss this further. I am committed to completing any required handover before my exit.







Here‚Äôs a professional email you can send to your team:

---

**Subject:** NVAP Unit Testing ‚Äì Holiday Scenario Investigation

Hi Team,

Lavanya and I are currently working on the NVAP unit testing.

To replicate the holiday issue, we initially uploaded a message to the queue and updated the **FEXCH** and **FFC** fields on the GMI side. When we uploaded the same message again with the correct **FEXCH** and **FFC**, we encountered an ‚ÄúInvalid Exchange‚Äù error.

We‚Äôre actively investigating this behavior to understand the root cause. Once we resolve this, we‚Äôll proceed with validating each test case and completing the remaining unit testing.

Will keep you posted on further updates.

Best regards,
\[Your Name]

---

Let me know if you want to add any more technical details or CC someone.





Here‚Äôs a polished and professional version of your email:

---

**Subject:** Urgent: Connection Refused Issue in `tml_fcd_distributor` and Notification Services

Hi Team,

We are currently facing a **"connection refused"** issue in the `tml_fcd_distributor` and notification services. This occurs intermittently, and in some cases, right after starting the application.

When we attempt to send a few trades post-startup, the system throws a connection refused exception. At the moment, we are required to **manually stop and restart the process** to get it working, which is not sustainable.

This poses a significant risk to our planned release on **26th July**, and we will not be able to proceed with the release if this issue remains unresolved.

**Request:**
Kindly help us identify the root cause and guide us on the next steps to address this issue permanently.

Thanks,
\[Your Name]
\[Your Team / Project Name]

---

Let me know if you want to add logs or any technical details to help the support/infrastructure team debug this faster.




Sure! Here's the revised version including the line asking for the next steps:

---

Subject: GMI Holiday Flow ‚Äì Data Verification and Unit Testing Approach

Hi Srihari,

Lavanya has restored the data for the required dates in the tmlqua env1 environment. We have started verification for the recent US holidays (July 4 and June 19), as issues usually surface on the T+1 date. So, we reviewed June 20 and July 7.

Key Observations:

* All NVAP groups for these dates are booked successfully.
* Each NVAP Group ID was verified along with the corresponding ffc and fexch values.
* No group ID was found with the status "NVAP NOT BOOKED".
* We also checked GMITRNF1 for any frecno with incorrect ffc and fexch values but found no inconsistencies.

Unit Testing Approach:
We can proceed with unit testing only by manually inserting a few fill records in GMITRNF1, GMOLNKF1, and GMILNKF1. Since all the NVAP statuses are booked successfully, we are unable to replicate a failed scenario.

Also, flowing the message from GMI to TML does not serve the purpose for this case, as we are focusing on updating specific records directly in GMI and validating the impact.

Please let us know the next steps.

Best regards,
\[Your Name]



Got it! Here‚Äôs a more concise, non-repetitive version of your **Mid-Year Review** organized by the four goals:

---

## Mid-Year Review (Jan‚ÄìJun 2025)

### Manage Risk

* Completed two rounds of Apache Tomcat and JDK upgrades, plus Spring framework updates, to resolve vulnerabilities and NPT issues.
* Conducted ARC testing to validate TML to DR failover readiness.
* Fixed a critical NVAP production issue related to incorrect fstat7 values; currently testing across multiple regions.
* Separated logging and configuration files by environment to reduce deployment errors.
* Addressed L3 production issues including the tmltradeload to GMI stop script failure.
* Implemented a stub FTP file reader workaround during FTP server downtime.
* Resolved a PCAT quarantine violation to maintain compliance.

### Drive Operational Excellence

* Achieved extensive unit test coverage across key modules such as SilverFileLoader, TML APS, and TML Notification.
* Automated log verification for all TML processes to improve monitoring efficiency.
* Supported L3 issue triaging and rota support, contributing to faster issue resolution.
* Participated in vendor recovery and failover testing to ensure system stability.
* Improved configuration management for different environments.

### Drive Growth

* Pursuing self-learning on Spring Security, Docker, and Kubernetes via Udemy.
* Contributed to fixing the OMS tab issue in TML GUI (work in progress).
* Assisted with cross-regional testing for trade matching and NVAP modules to support upcoming releases.

### Great Place to Work

* Engaged in volunteer activities such as chart making to support team culture.
* Collaborated actively with peers during testing, issue resolution, and recovery exercises.
* Shared knowledge gained from self-study and documentation to support team learning.

---

Let me know if you want it further condensed or customized!



Sure! Here's the revised **"Progress Towards Manage Risk Goal"** section written plainly without bold formatting:

---

### Progress Towards ‚ÄúManage Risk‚Äù Goal

* Completed two rounds of Apache Tomcat and JDK upgrades, as well as Spring Boot, Spring Web, and WebMVC version upgrades to remove known vulnerabilities and address NPT-related risks across Silver modules.

* Conducted successful ARC testing to verify TML to DR failover readiness, ensuring resilience and minimizing operational downtime.

* Separated logger and configuration files by environment (Development, QA, Production) to prevent configuration leaks and reduce the risk of deployment errors.

* Resolved key production issues, including the tmltradeload to GMI stop script failure and the NVAP trade mismatch caused by an incorrect fstat7 value. These fixes helped avoid data inconsistencies and downstream processing errors.

* Built a stub-based FTP file reading mechanism to maintain data processing when the FTP server was not accessible, ensuring business continuity.

* Fixed a PCAT quarantine violation by identifying the root cause and applying appropriate code corrections to maintain compliance with internal controls and audit requirements.

* Increased unit test coverage and created an automation script to verify logs across all TML processes, helping catch issues earlier and reduce manual validation effort.

---

Let me know if you want this incorporated directly into your full mid-year review or modified for a specific format like goal-tracking systems.




Certainly! Below is a concise section you can add to your **Mid-Year Review** to demonstrate progress towards the **"Manage Risk"** goal, tailored to your work:

---

### ‚úÖ **Progress Towards ‚ÄúManage Risk‚Äù Goal**

* **Platform Upgrades**: Completed **two rounds of Apache Tomcat and JDK upgrades**, along with Spring framework upgrades (Spring Boot, Web, WebMVC) to **eliminate security vulnerabilities** and address **NPT risks** across Silver modules.

* **Disaster Recovery (DR) Readiness**: Successfully executed **ARC testing** to validate **TML-to-DR failover**, ensuring business continuity and minimizing operational risk.

* **Configuration Segregation**: Isolated **logger and configuration files per environment** (Dev/QA/Prod) to prevent config leaks and reduce deployment errors.

* **Production Fixes & Prevention**:

  * Fixed critical **L3 issue** in `tmltradeload` to `GMI` stop script ‚Äî preventing further job failures.
  * Resolved **NVAP trade mismatch** caused by incorrect `fstat7`, reducing financial reporting risk.
  * Implemented a **stub FTP solution** to handle file processing when the FTP server was unavailable, ensuring continuity in data flow.

* **Compliance**: Addressed and resolved a **PCAT quarantine violation**, ensuring alignment with regulatory and audit standards.

* **Test Coverage & Automation**: Improved unit test coverage and built **log verification automation**, reducing the risk of undetected failures in TML processes.

---

Would you like this merged into the earlier mid-year summary or formatted for a goal tracker or self-appraisal system (like Workday, SuccessFactors, etc.)?




Sure! Here's your **complete, polished Mid-Year Review** that captures all your contributions clearly and professionally:

---

## üóì **Mid-Year Review Summary (Jan ‚Äì Jun 2025)**

---

### ‚úÖ **System Upgrades & Technical Enhancements**

* Successfully **upgraded Apache Tomcat and JDK** versions to resolve NPT-related issues in the **TML GUI** application.
* Applied **Java configuration updates** to align with new deployment standards across environments.
* Completed **Spring Boot**, **Spring WebMVC**, and **Spring Web** upgrades for all **Silver modules** (**TMLZ-5432**) to address identified vulnerabilities. The updated versions were released successfully.

---

### üß™ **Testing & Unit Test Coverage**

* Developed and completed **JUnit test cases** for multiple components:

  * `SilverFileLoader`
  * `TML_Notification`
  * `TML_LegacyFileLoader`
  * `TMLFileLoader`
  * `TML_Status`
  * `TML_HighAvailabilityAggregation`
  * `SilverCommon` module
  * `TML APS` module ‚Äì achieved test coverage goals.
* Designed and implemented an **automation script** to verify logs for all TML processes, improving debugging efficiency.

---

### üõ†Ô∏è **Production Support & L3 Fixes**

* Resolved **L3 issue**: `tmltradeload` to `GMI` stop script was failing ‚Äì root cause identified and script fixed.
* Provided **support for Rota-based L3 issues** with timely resolutions and impact analysis.

---

### üîÅ **Automation & Configuration Improvements**

* Developed a **stub-based TML FTP file reader** as a temporary workaround due to FTP server unavailability; the rest of the process flow remained unchanged.
* Separated **logger and configuration settings** by environment (Dev, QA, Prod) to enhance maintainability and reduce risk of misconfiguration.

---

### ‚ö†Ô∏è **NVAP & Trade Matching Issue**

* Fixed an NVAP production issue where **trades were averaged but not matched off** due to an incorrect `fstat7` value.
* Applied a code-level fix and currently conducting **multi-region testing** (APAC, AMRS, EMEA) to ensure stability and correctness prior to release.

---

### ‚òÅÔ∏è **Disaster Recovery & Compliance**

* Successfully conducted **ARC testing** for **TML to DR server** failover readiness.
* Resolved **PCAT quarantine violation** with proper code corrections and documentation to ensure compliance.

---

### üíº **Feature Development & Fixes**

* Worked on the **TML GUI OMS tab** to address tab rendering issues ‚Äî analysis and development in progress.

---

### ü§ù **Collaboration & Recovery Testing**

* Participated in **Vendor Integration Recovery Testing** as part of resilience validation efforts.
* Actively collaborated with internal and external teams during DR planning and integration tests.

---

### üìö **Self-Learning & Volunteering**

* Ongoing personal upskilling in:

  * **Spring Security**
  * **Docker**
  * **Kubernetes** via **Udemy** courses.
* Participated in team **volunteer activities**, including **chart preparation** and creative contributions to team-building initiatives.

---

Would you like a **shorter summary version**, or a version aligned to a specific performance rating scale (like ‚ÄúExceeds Expectations,‚Äù etc.)?




Certainly! Here's **one clear acceptance criterion** in **Given‚ÄìWhen‚ÄìThen** format:

---

### ‚úÖ **Acceptance Criterion:**

```
Given a 2-hour recovery testing window is scheduled,  
When the Wipro associate initiates BCP by sending an invocation email to the Recovery PoC,  
Then the Recovery PoC must acknowledge the email and begin supporting the AIT work during the testing period.
```

---

Let me know if you need it tailored further or added to a full story format.



Sure! Here's a concise version of the **JIRA Story Description**:

---

### ‚úÖ **Description (Short Version):**

Supporting BAU for the vendor during recovery site testing for AIT. As part of BCP, Wipro associates will initiate and revoke BCP via email, coordinate with the Recovery PoC, and collect required screenshots (MyInfo login, AIT console at start, mid, and end). Artifacts will be compiled and validated by BCP team leads post-testing.

---

Let me know if you need this formatted for a JIRA ticket or want the acceptance criteria too.




Thanks! Here‚Äôs the updated and more accurate version of the email, including the point about licensing:

---

**Subject:** Request to Join Moderne CLI/DX Pilot ‚Äì TML\_GUI Application

Hi Team,

We would like to express our interest in participating in the Moderne CLI/DX Pilot. Please find our details below:

---

**1. AIT/SPK:** 24271 ‚Äì TML
**2. Module/Application:**

* **Application Name:** TML\_GUI (Angular frontend and REST services)
* **Repository:** \[Bitbucket repo link ‚Äì please insert if available]
* **Server:** Apache Tomcat

**3. Team SPOC and Members:**

* **SPOC:** \[Your Name]
* **Team Members:** \[List of members with emails if needed]

**4. Use-Case for PoC:**
We have raised an ERP to address a **Spring Framework path traversal vulnerability**. While the commercial version **Spring 5.3.41** is available, the necessary **licensing is yet to be procured by the central team**.

In parallel, we are planning a **PoC to migrate our application from JDK 8 to JDK 21**. The PoC will focus on:

* Assessing and applying automated refactoring support for Spring upgrade
* Identifying and remediating JDK 8 to 21 compatibility issues using Moderne‚Äôs capabilities

We are keen to leverage Moderne‚Äôs CLI and Developer Experience tools to streamline this modernization and reduce manual effort.

Please review our request and let us know the next steps for onboarding.

Best regards,
\[Your Full Name]
\[Your Designation]
\[Your Email]
\[Your Contact Number]

---

Let me know if you'd like help filling in any placeholder details.



function showLog(message, isError) {
    var logDiv = document.getElementById("debug-log");
    if (!logDiv) return;

    logDiv.style.display = "block";
    var time = new Date().toLocaleTimeString();

    logDiv.innerHTML += `
        <div style="margin-bottom:6px; ${isError ? 'color:red;' : ''}">
            [${time}]<br>
            <pre style="white-space:pre-wrap; font-family:monospace;">${message}</pre>
        </div>`;
}

// Global error capture
window.onerror = function(message, source, lineno, colno, error) {
    let fullMessage = "";

    if (error && error.stack) {
        fullMessage = error.stack;
    } else {
        // Fallback if stack is missing
        fullMessage = `${message} at ${source}:${lineno}:${colno}`;
    }

    showLog(`‚ùå JS Error:\n${fullMessage}`, true);
    return true; // Prevent default alert popup (optional)
};



function showLog(message) {
    var logDiv = document.getElementById("debug-log");
    if (!logDiv) return;

    logDiv.style.display = "block";
    var time = new Date().toLocaleTimeString();
    logDiv.innerHTML += `<div style="margin-bottom:8px;">[${time}] ${message}</div>`;
}



window.onerror = function(message, source, lineno, colno, error) {
    let logMessage = "<strong>‚ùå JavaScript Error:</strong><br>";

    if (error && error.stack) {
        // Use the full stack trace (best way)
        logMessage += `<pre style="white-space:pre-wrap; font-family:monospace; font-size:12px;">${error.stack}</pre>`;
    } else {
        // Fallback for old IE or unknown cases
        logMessage += `<pre style="white-space:pre-wrap; font-family:monospace; font-size:12px;">${message} at ${source}:${lineno}:${colno}</pre>`;
    }

    showLog(logMessage);
    return true; // Prevent browser's default error dialog
};





function showLog(message) {
    var logDiv = document.getElementById("debug-log");
    if (!logDiv) return;

    logDiv.style.display = "block";
    var time = new Date().toLocaleTimeString();

    // Try to capture caller's stack info
    var stack = new Error().stack;
    var locationInfo = "";

    if (stack) {
        var lines = stack.split("\n");
        if (lines[2]) {
            locationInfo = lines[2].trim();
        }
    }

    logDiv.innerHTML += `<div>[${time}] ${message}<br><small style="color:gray;">${locationInfo}</small></div>`;
}





<div id="debug-log" style="display:none; background:#eee; color:#000; font-size:12px; padding:10px; position:fixed; bottom:0; left:0; width:100%; max-height:200px; overflow:auto; z-index:9999;"></div>


function showLog(message) {
    var logDiv = document.getElementById("debug-log");
    logDiv.style.display = "block";
    var time = new Date().toLocaleTimeString();
    logDiv.innerHTML += "<div>[" + time + "] " + message + "</div>";
}


showLog("Controller loaded");


javascript:(
  function() {
    var debugDiv = document.createElement('div');
    debugDiv.id = 'debugConsole';
    debugDiv.style.cssText = 'position:fixed;bottom:0;right:0;width:100%;height:200px;background:black;color:lime;overflow:auto;z-index:9999;padding:10px;font-family:monospace;border-top:2px solid red;';
    document.body.appendChild(debugDiv);
    alert('Debug panel added!');
  }
)();


// Top of omsstaging.controller.js
window.onerror = function(message, source, lineno, colno, error) {
    // Log to a hidden DOM element (fallback)
    var errorLog = document.getElementById('errorLog') || document.createElement('div');
    errorLog.id = 'errorLog';
    errorLog.style.display = 'none'; // Hide from users
    document.body.appendChild(errorLog);
    
    errorLog.innerHTML += '[ERROR] ' + message + ' at ' + source + ':' + lineno + '<br>';
    
    // Optional: Send to server (if backend API exists)
    // fetch('/log-error', { method: 'POST', body: JSON.stringify({ message, source, lineno, error }) });
    
    return true; // Prevents default browser error UI
};
