
Sure! Here's a concise version of the **JIRA Story Description**:

---

### ✅ **Description (Short Version):**

Supporting BAU for the vendor during recovery site testing for AIT. As part of BCP, Wipro associates will initiate and revoke BCP via email, coordinate with the Recovery PoC, and collect required screenshots (MyInfo login, AIT console at start, mid, and end). Artifacts will be compiled and validated by BCP team leads post-testing.

---

Let me know if you need this formatted for a JIRA ticket or want the acceptance criteria too.




Thanks! Here’s the updated and more accurate version of the email, including the point about licensing:

---

**Subject:** Request to Join Moderne CLI/DX Pilot – TML\_GUI Application

Hi Team,

We would like to express our interest in participating in the Moderne CLI/DX Pilot. Please find our details below:

---

**1. AIT/SPK:** 24271 – TML
**2. Module/Application:**

* **Application Name:** TML\_GUI (Angular frontend and REST services)
* **Repository:** \[Bitbucket repo link – please insert if available]
* **Server:** Apache Tomcat

**3. Team SPOC and Members:**

* **SPOC:** \[Your Name]
* **Team Members:** \[List of members with emails if needed]

**4. Use-Case for PoC:**
We have raised an ERP to address a **Spring Framework path traversal vulnerability**. While the commercial version **Spring 5.3.41** is available, the necessary **licensing is yet to be procured by the central team**.

In parallel, we are planning a **PoC to migrate our application from JDK 8 to JDK 21**. The PoC will focus on:

* Assessing and applying automated refactoring support for Spring upgrade
* Identifying and remediating JDK 8 to 21 compatibility issues using Moderne’s capabilities

We are keen to leverage Moderne’s CLI and Developer Experience tools to streamline this modernization and reduce manual effort.

Please review our request and let us know the next steps for onboarding.

Best regards,
\[Your Full Name]
\[Your Designation]
\[Your Email]
\[Your Contact Number]

---

Let me know if you'd like help filling in any placeholder details.



function showLog(message, isError) {
    var logDiv = document.getElementById("debug-log");
    if (!logDiv) return;

    logDiv.style.display = "block";
    var time = new Date().toLocaleTimeString();

    logDiv.innerHTML += `
        <div style="margin-bottom:6px; ${isError ? 'color:red;' : ''}">
            [${time}]<br>
            <pre style="white-space:pre-wrap; font-family:monospace;">${message}</pre>
        </div>`;
}

// Global error capture
window.onerror = function(message, source, lineno, colno, error) {
    let fullMessage = "";

    if (error && error.stack) {
        fullMessage = error.stack;
    } else {
        // Fallback if stack is missing
        fullMessage = `${message} at ${source}:${lineno}:${colno}`;
    }

    showLog(`❌ JS Error:\n${fullMessage}`, true);
    return true; // Prevent default alert popup (optional)
};



function showLog(message) {
    var logDiv = document.getElementById("debug-log");
    if (!logDiv) return;

    logDiv.style.display = "block";
    var time = new Date().toLocaleTimeString();
    logDiv.innerHTML += `<div style="margin-bottom:8px;">[${time}] ${message}</div>`;
}



window.onerror = function(message, source, lineno, colno, error) {
    let logMessage = "<strong>❌ JavaScript Error:</strong><br>";

    if (error && error.stack) {
        // Use the full stack trace (best way)
        logMessage += `<pre style="white-space:pre-wrap; font-family:monospace; font-size:12px;">${error.stack}</pre>`;
    } else {
        // Fallback for old IE or unknown cases
        logMessage += `<pre style="white-space:pre-wrap; font-family:monospace; font-size:12px;">${message} at ${source}:${lineno}:${colno}</pre>`;
    }

    showLog(logMessage);
    return true; // Prevent browser's default error dialog
};





function showLog(message) {
    var logDiv = document.getElementById("debug-log");
    if (!logDiv) return;

    logDiv.style.display = "block";
    var time = new Date().toLocaleTimeString();

    // Try to capture caller's stack info
    var stack = new Error().stack;
    var locationInfo = "";

    if (stack) {
        var lines = stack.split("\n");
        if (lines[2]) {
            locationInfo = lines[2].trim();
        }
    }

    logDiv.innerHTML += `<div>[${time}] ${message}<br><small style="color:gray;">${locationInfo}</small></div>`;
}





<div id="debug-log" style="display:none; background:#eee; color:#000; font-size:12px; padding:10px; position:fixed; bottom:0; left:0; width:100%; max-height:200px; overflow:auto; z-index:9999;"></div>


function showLog(message) {
    var logDiv = document.getElementById("debug-log");
    logDiv.style.display = "block";
    var time = new Date().toLocaleTimeString();
    logDiv.innerHTML += "<div>[" + time + "] " + message + "</div>";
}


showLog("Controller loaded");


javascript:(
  function() {
    var debugDiv = document.createElement('div');
    debugDiv.id = 'debugConsole';
    debugDiv.style.cssText = 'position:fixed;bottom:0;right:0;width:100%;height:200px;background:black;color:lime;overflow:auto;z-index:9999;padding:10px;font-family:monospace;border-top:2px solid red;';
    document.body.appendChild(debugDiv);
    alert('Debug panel added!');
  }
)();


// Top of omsstaging.controller.js
window.onerror = function(message, source, lineno, colno, error) {
    // Log to a hidden DOM element (fallback)
    var errorLog = document.getElementById('errorLog') || document.createElement('div');
    errorLog.id = 'errorLog';
    errorLog.style.display = 'none'; // Hide from users
    document.body.appendChild(errorLog);
    
    errorLog.innerHTML += '[ERROR] ' + message + ' at ' + source + ':' + lineno + '<br>';
    
    // Optional: Send to server (if backend API exists)
    // fetch('/log-error', { method: 'POST', body: JSON.stringify({ message, source, lineno, error }) });
    
    return true; // Prevents default browser error UI
};
