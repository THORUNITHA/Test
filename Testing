

if (isUat && isFileDownloaded) {
    try {
        Files.deleteIfExists(Paths.get(uatPath, fileName));
        log.info("UAT mode: Deleted original file from inbound path: " + fileName);
    } catch (IOException e) {
        log.error("UAT mode: Failed to delete original file: " + fileName, e);
    }
}


private FTPClient deleteFile(final Map<String, FTPClient> ftpClientMap,
                             final FtpConfig config,
                             boolean isFileDownloaded,
                             final String remoteHost,
                             final String serverAddress,
                             FTPClient ftp,
                             final String fileName,
                             final long ftpFileLogId,
                             final boolean duplicateFile)
        throws SocketException, IOException, InterruptedException {

    final boolean isUat = "TML_ALLOC_UAT".equalsIgnoreCase(System.getProperty("env"));

    if (isFileDownloaded || duplicateFile) {
        Log.info("Sending delete command for file: " + fileName);

        boolean deleteSuccessful = false;

        if (isUat) {
            // Simulate delete from local path
            String dropPath = config.getDropLocationC();
            File fileToDelete = new File(dropPath, fileName);

            Log.info("UAT mode: Attempting to delete file from local path: " + fileToDelete.getAbsolutePath());

            if (fileToDelete.exists()) {
                deleteSuccessful = fileToDelete.delete();

                if (deleteSuccessful) {
                    Log.info("UAT mode: Successfully deleted file from local path: " + fileName);
                } else {
                    Log.warn("UAT mode: Failed to delete file from local path: " + fileName);
                    setStatusToException(config.getClientC(), ftpFileLogId,
                            "UNABLE_TO_DELETE_UAT_FILE", "File.delete() returned false");
                }
            } else {
                Log.warn("UAT mode: File does not exist at local path: " + fileToDelete.getAbsolutePath());
                setStatusToException(config.getClientC(), ftpFileLogId,
                        "FILE_NOT_FOUND_UAT", "File not found at UAT location");
            }

        } else {
            // PROD/INT actual FTP deletion
            try {
                ftp.setSoTimeout(Integer.parseInt(props.getProperty("ftp.fileDeleteTimeout").trim()));
                deleteSuccessful = ftp.deleteFile(fileName);

                if (deleteSuccessful) {
                    Log.info("Delete command is successful for file: " + fileName);
                } else {
                    Log.info("Delete command is unsuccessful for file: " + fileName);
                }

            } catch (Exception e) {
                Log.error("Unable to delete file: " + fileName, e);
                setStatusToException(config.getClientC(), ftpFileLogId,
                        "UNABLE_TO_DELETE_FTP_FILE", e.getLocalizedMessage());

                ftp = ftpClientMap.get(serverAddress);
                if (ftp == null) {
                    ftp = TMLFtpConstants.B2BSERVER.equalsIgnoreCase(remoteHost)
                            ? getFtp(ftpClientMap, remoteHost)
                            : getFtps(ftpClientMap, remoteHost);
                }
            }
        }
    }

    return ftp;
}


List<FTPFile> ftpFileList = new ArrayList<>();
for (File file : files) {
    if (file == null) {
        log.warn("UAT mode: Skipping null file.");
        continue;
    }
    if (!file.isFile()) {
        log.info("UAT mode: Skipping directory: " + file.getName());
        continue;
    }

    try {
        FTPFile ftpFile = new FTPFile();
        ftpFile.setName(file.getName());
        ftpFile.setSize(file.length());
        ftpFileList.add(ftpFile);
        log.debug("UAT mode: Added FTPFile: " + ftpFile.getName() + ", size: " + ftpFile.getSize());
    } catch (Exception e) {
        log.error("UAT mode: Error converting file to FTPFile: " + file.getName(), e);
    }
}

ftpFiles = ftpFileList.toArray(new FTPFile[0]);
log.info("UAT mode: FTP files created: " + ftpFiles.length);


UPDATE T_FTP_CONFIG
SET 
    REMOTE_HOST_C = 'LOCAL_UAT',
    REMOTE_DIR_C = '',
    CONNECTION_TYPE_C = 'LOCAL',
    DROP_LOCATION_C = '/u01/uat_ftp_drop',
    TEMP_LOCATION_C = '',
    IS_ENABLED_SW = 'Y',
    SYSTEM_INSTANCE_C = 'UAT'
WHERE CLIENT_C = 'your_client_code';



// === UAT block starts ===
if ("UAT".equalsIgnoreCase(systemInstance)) {
    try {
        final String fileKey = serverAddress + " " + remoteDirectory;

        // Either hardcode a UAT test path or use DROP_LOCATION_C from config
        // Example: hardcoded
        // String uatPath = "/Users/yourname/UAT_FTP_Test_Files";

        // Recommended: use DROP_LOCATION_C
        String uatPath = config.getDropLocationC();
        log.info("UAT mode: Simulating FTP with local directory: " + uatPath);

        File localDir = new File(uatPath);
        if (!localDir.exists() || !localDir.isDirectory()) {
            log.error("UAT directory does not exist or is not a directory: " + uatPath);
            return false;
        }

        File[] files = localDir.listFiles();
        if (files == null || files.length == 0) {
            log.info("UAT mode: No files found in directory: " + uatPath);
            return true; // Nothing to process
        }

        FTPFile[] ftpFiles = Arrays.stream(files)
            .filter(File::isFile)
            .map(file -> {
                FTPFile ftpFile = new FTPFile();
                ftpFile.setName(file.getName());
                ftpFile.setSize(file.length());
                return ftpFile;
            })
            .toArray(FTPFile[]::new);

        filesMap.put(fileKey, ftpFiles);
        return true; // UAT flow ends here

    } catch (Exception e) {
        log.error("UAT mode: Error reading local files", e);
        return false;
    }
}
// === UAT block ends ===





# Extract just the process name from the path (assumes it's one directory above script)
process_name=$(basename "$(dirname "$script")")

# Check if it's already running
if pgrep -f "$process_name" > /dev/null; then
    echo "Process '$process_name' is already running. Skipping start."
    continue
fi




Here‚Äôs a **detailed and professional email-style note** summarizing:

* The automation you implemented,
* How it helps,
* How much time it saves (estimated),
* How it improves reliability and testing (including for upgrades and ARC validation).

---

### ‚úÖ **Subject:** Automation for Process Startup & Error Log Scanning ‚Äî Post-Upgrade / ARC Validation

---

Hi Team,

As part of our ongoing effort to streamline post-upgrade validation and operational checks across modules, we have implemented a **script-based automation** that significantly reduces manual work involved in starting processes and verifying their health.

---

### üîß **What Has Been Implemented**

* A shell script that:

  1. Reads a list of `*start*.sh` scripts (e.g., `start.sh`, `tmlstart.sh`) from a central file.
  2. Starts each process and checks for startup success.
  3. Waits briefly, then scans the corresponding `logs/` directory of each process.
  4. Automatically identifies `.log` files modified **today**.
  5. Searches those logs for the keyword `ERROR` and summarizes findings in a central report file.

---

### ‚è±Ô∏è **Time & Effort Saved**

#### **Before Automation:**

* Manual effort required per module:

  * SSH into each process folder (\~77 modules)
  * Manually run the start script
  * Navigate to the `logs/` directory
  * Open each log file, filter for errors
* **Estimated Time per process:** 3‚Äì5 minutes
* **Total Time:** 77 √ó \~4 min = **\~5 hours**

#### **After Automation:**

* One command starts all scripts and performs all checks
* Central report generated with any `ERROR` entries
* **Total Time:** \~1‚Äì2 minutes (end-to-end)
* **Time Saved:** **\~4.5+ hours per run**

---

### ‚úÖ **How This Helps**

* **Faster validation** after upgrade or deployment
* **Centralized ERROR tracking** ‚Äî no need to open logs manually
* Useful for:

  * **ARC testing**
  * **Post-deployment smoke tests**
  * **Daily process health checks**
* Minimizes manual error (e.g., skipping logs or misinterpreting issues)
* Scales to additional processes with minimal effort ‚Äî just update the script list

---

### üìÇ **Generated Outputs**

* Central report:
  `/tmp/process_errors_<date>.log`
  (Lists process, log path, and all matched `ERROR` lines)

* Log directories scanned:
  `logs/` or `log/` folder in each process directory

---

### üöÄ **Next Steps**

* Can be enhanced to:

  * Send email alerts on failures
  * Check process status (e.g., using `ps`, `systemctl`)
  * Run in parallel for even faster execution
* Optionally integrate with CI/CD or upgrade pipelines

---

Let me know if you would like a walkthrough or want this integrated into post-upgrade playbooks.

Thanks,
`<Your Name>`
`<Your Team or Role>`

---

Let me know if you'd like this formatted as an actual `.eml` file or if you'd like to include command examples.





import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.lang.reflect.Field;
import java.util.*;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class TmlInternalApsServiceImplTest {

    private TmlInternalApsServiceImpl service;

    @Before
    public void setup() throws Exception {
        service = new TmlInternalApsServiceImpl();

        // Inject cache and allocCache using reflection
        setPrivateField(service, "cache", new HashSet<>(Collections.singleton("CACHED_TRACE")));
        setPrivateField(service, "allocCache", new HashSet<>(Collections.singleton("ALLOC_CACHED_TRACE")));
    }

    @Test
    public void testGetTrnf1_AllBranchesCovered() throws Exception {
        // Create mocked allocation with ALLOCATION_PROCESS type
        TAllocationGenericId alloc = mock(TAllocationGenericId.class);
        when(alloc.getAllocationType()).thenReturn(AllocationType.ALLOCATION_PROCESS);

        // 1st: trace in cache ‚Üí skipped
        Gmitrnfl t1 = mock(Gmitrnfl.class);
        when(t1.getFtrace()).thenReturn("CACHED_TRACE");

        // 2nd: trace in allocCache and ALLOCATION_PROCESS ‚Üí skipped
        Gmitrnfl t2 = mock(Gmitrnfl.class);
        when(t2.getFtrace()).thenReturn("ALLOC_CACHED_TRACE");

        // 3rd: isAvgOrClosedFill = true ‚Üí skipped
        Gmitrnfl t3 = mock(Gmitrnfl.class);
        when(t3.getFtrace()).thenReturn("TRACE_CLOSED");
        when(t3.getFstat7()).thenReturn("X");
        mockStaticHexToBinary("TRACE_CLOSED", true);  // should be skipped

        // 4th: valid trade ‚Üí should return this one
        Gmitrnfl t4 = mock(Gmitrnfl.class);
        when(t4.getFtrace()).thenReturn("VALID_TRACE");
        when(t4.getFstat7()).thenReturn("O");
        mockStaticHexToBinary("VALID_TRACE", false);  // should pass

        List<Gmitrnfl> trnList = Arrays.asList(t1, t2, t3, t4);

        Gmitrnfl result = service.getTrnf1(trnList, alloc);
        assertNotNull(result);
        assertEquals("VALID_TRACE", result.getFtrace());
    }

    // Helper to inject private fields
    private void setPrivateField(Object target, String fieldName, Object value) throws Exception {
        Field field = target.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(target, value);
    }

    // Mock static method HexToBinaryConverter.isAvgOrClosedFill(String)
    private void mockStaticHexToBinary(String fstat7, boolean returnValue) {
        Mockito.mockStatic(HexToBinaryConverter.class)
               .when(() -> HexToBinaryConverter.isAvgOrClosedFill(fstat7))
               .thenReturn(returnValue);
    }
}





@RunWith(MockitoJUnitRunner.class)
public class TmlInternalApsServiceImplTest {

    private TmlInternalApsServiceImpl service;

    @Before
    public void setUp() {
        service = new TmlInternalApsServiceImpl();
    }

    @Test
    public void testGetGmiParams() throws Exception {
        // Setup
        TAllocationGenericId alloc = mock(TAllocationGenericId.class);
        when(alloc.getExecBrkMneC()).thenReturn("EXFIRM");
        when(alloc.getGmiExchCdC()).thenReturn("27");
        when(alloc.getGmiContractCdC()).thenReturn("FCODE");
        when(alloc.getQuantityI()).thenReturn(10);
        when(alloc.getSideC()).thenReturn("BUY");
        when(alloc.getPriceD()).thenReturn(new BigDecimal("123.45"));
        when(alloc.getStrikePriceD()).thenReturn(new BigDecimal("150.00"));
        when(alloc.getPutCallC()).thenReturn("C");

        Date tradeDate = new SimpleDateFormat("yyyy-MM-dd").parse("2024-12-15");
        Date maturityDate = new SimpleDateFormat("yyyy-MM-dd").parse("2025-06-15");

        when(alloc.getTradeDateDt()).thenReturn(tradeDate);
        when(alloc.getMaturityDateDt()).thenReturn(maturityDate);

        List<String> accounts = Arrays.asList("ACCT001");
        List<String> ftracel = Arrays.asList("TRACE001");
        List<String> execFirmL = null;

        // Use reflection to call protected method
        Method method = TmlInternalApsServiceImpl.class.getDeclaredMethod("getGmiParams",
                TAllocationGenericId.class, List.class, List.class, List.class);
        method.setAccessible(true);

        @SuppressWarnings("unchecked")
        Map<String, Object> result = (Map<String, Object>) method.invoke(service, alloc, accounts, ftracel, execFirmL);

        // Validate result
        assertNotNull(result);
        assertEquals("FCODE", result.get("FFC"));
        assertEquals(accounts, result.get("ACCOUNT"));
        assertEquals(10, result.get("FQTY"));
        assertEquals("27", result.get("FEXCH"));
        assertEquals("1", result.get("FBS")); // from BUY => 1
        assertEquals(123.45, result.get("FTPRIC"));
        assertEquals("C", result.get("FSUBTY"));
        assertEquals(150.00, result.get("FSTRIK"));
        assertTrue(((List<?>) result.get("FIEFRM")).contains("EXFIRM"));
        assertEquals(ftracel, result.get("MSG_FTRACE"));

        // Optional: print out keys for debug
        result.forEach((k, v) -> System.out.println(k + " = " + v));
    }
}






@RunWith(MockitoJUnitRunner.class)
public class TmlInternalApsServiceImplTest {

    @InjectMocks
    private TmlInternalApsServiceImpl service;

    @Mock
    private TmlQueryDao tmlQueryDao;

    @Spy
    private Logger log = LoggerFactory.getLogger(TmlInternalApsServiceImpl.class);

    @Before
    public void setup() throws Exception {
        // Inject mock logger if necessary via reflection
        Field logField = TmlInternalApsServiceImpl.class.getDeclaredField("log");
        logField.setAccessible(true);
        logField.set(service, log);
    }

    @Test
    public void testProcessReplayGroup_withOnlyAvg() {
        AllocContainer container = mock(AllocContainer.class);
        when(container.hasOnlyAvg()).thenReturn(true);
        when(container.hasSamePriceQty(Mockito.anyInt())).thenReturn(true);

        Map<String, AllocContainer> allocMap = new HashMap<>();
        allocMap.put("group1", container);

        // Mock getAllocs() via reflection
        try {
            Method setAllocMethod = TmlInternalApsServiceImpl.class.getDeclaredMethod("getAllocs", String.class);
            setAllocMethod.setAccessible(true);
        } catch (Exception e) {
            fail("Reflection error in setting up getAllocs()");
        }

        // Force override getAllocs to return mock data
        doReturn(allocMap).when(service).getAllocs(Mockito.anyString());

        // Run
        service.processReplayGroup();

        // Verify log and logic
        verify(log, atLeastOnce()).info(contains("Started (processReplayGroup) processing group:"));
        verify(container, times(1)).hasOnlyAvg();
        verify(container, never()).hasSamePriceQty(Mockito.anyInt());
    }

    @Test
    public void testProcessReplayGroup_withSamePriceQty() {
        AllocContainer container = mock(AllocContainer.class);
        when(container.hasOnlyAvg()).thenReturn(false);
        when(container.hasSamePriceQty(Mockito.anyInt())).thenReturn(true);

        Map<String, AllocContainer> allocMap = new HashMap<>();
        allocMap.put("group2", container);

        doReturn(allocMap).when(service).getAllocs(Mockito.anyString());

        service = Mockito.spy(service); // so we can verify internal method
        doNothing().when(service).updateMatchedStatus(anyString(), anyString(), any(AllocContainer.class));

        service.processReplayGroup();

        verify(service).updateMatchedStatus(eq("RTS"), contains("fills and avg lines found"), eq(container));
    }

    @Test
    public void testProcessReplayGroup_withException() {
        doThrow(new RuntimeException("Test Exception")).when(service).getAllocs(anyString());

        service.processReplayGroup(); // should catch internally

        verify(log).error(contains("exception occured while processing processReplayGroup"), any(Exception.class));
    }
}
